#!/usr/bin/python3

import os
import sys
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from binaryaudit import util
from binaryaudit import abicheck
from binaryaudit import cli
from binaryaudit.orchestrator import ba_orchestrator as orchestrator

args = cli.arg_parser.parse_args()

util.set_verbosity(args.verbose)

if None is args.cmd:
    if not None is args.is_elf:
        if abicheck.is_elf(args.is_elf):
            util.note("'{}' is an ELF binary".format(args.is_elf))
            sys.exit(0)
        util.note("'{}' is not an ELF binary".format(args.is_elf))
        sys.exit(3)

    cli.arg_parser.print_help()
elif "rpm" == args.cmd:
    rpm_binaryaudit = None
    if 'y' == args.enable_telemetry:
        cli.validate_telemetry_args(args)
        rpm_binaryaudit = orchestrator(
                args.product_name,
                args.derivative,
                args.build_id,
                args.enable_telemetry,
                util.logger,
                args.db_config
        )
        rpm_binaryaudit.get_product_id()

    # Next call should be to perform the rpm package binary audit
    # That needs to be defined as part of ba_orchestrator class

    if args.list:
        if None is args.source_dir or None is args.out_filename:
            util.error("Pass package directory and JSON output file")
            sys.exit(1)
        abicheck.generate_package_json(args.source_dir, args.out_filename)
elif "db" == args.cmd:
    from binaryaudit.db import wrapper as db_wrapper
    try:
        db_conn = db_wrapper(args.db_config, util.logger)
        db_conn.initialize_db()
    except Exception as e:
        util.error(str(e))

    if db_conn.is_db_connected:
        util.note("Connection successful")
        sys.exit(0)
    else:
        util.note("Connection unsuccessful")
        sys.exit(1)
    pass
